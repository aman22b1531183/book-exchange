{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\itach\\\\Documents\\\\book-exchange-mern\\\\frontend\\\\src\\\\contexts\\\\SocketContext.js\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\n// frontend/src/contexts/SocketContext.js\nimport React, { createContext, useContext, useEffect, useState } from 'react';\nimport io from 'socket.io-client';\nimport { useAuth } from './AuthContext'; // To get the user token for authenticated sockets\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst SocketContext = /*#__PURE__*/createContext();\nexport const SocketProvider = ({\n  children\n}) => {\n  _s();\n  const {\n    user,\n    isAuthenticated,\n    token\n  } = useAuth(); // Get auth state from AuthContext\n  const [socket, setSocket] = useState(null);\n  const [isConnected, setIsConnected] = useState(false);\n  useEffect(() => {\n    // Only connect if the user is authenticated and a token exists\n    if (isAuthenticated && token) {\n      // Connect to your backend Socket.IO server\n      // Ensure this URL matches your backend server's URL\n      const newSocket = io('http://localhost:5000', {\n        // Add authentication headers if your backend requires it\n        // We'll implement this more robustly later if needed on the socket side\n        auth: {\n          token: token\n        }\n      });\n      newSocket.on('connect', () => {\n        console.log('Socket Connected:', newSocket.id);\n        setIsConnected(true);\n        // Emit an event to join a user-specific room on connect (optional, for later)\n        // newSocket.emit('joinUserRoom', user._id);\n      });\n      newSocket.on('disconnect', () => {\n        console.log('Socket Disconnected:', newSocket.id);\n        setIsConnected(false);\n      });\n      newSocket.on('connect_error', err => {\n        console.error('Socket Connection Error:', err.message);\n        setIsConnected(false);\n      });\n      setSocket(newSocket);\n\n      // Clean up the socket connection when the component unmounts or user logs out\n      return () => {\n        newSocket.disconnect();\n        setSocket(null);\n        setIsConnected(false);\n      };\n    } else if (!isAuthenticated && socket) {\n      // If user logs out and socket is still connected, disconnect it\n      socket.disconnect();\n      setSocket(null);\n      setIsConnected(false);\n    }\n  }, [isAuthenticated, token, user]); // Re-run effect if auth state changes\n\n  const contextValue = {\n    socket,\n    isConnected\n  };\n  return /*#__PURE__*/_jsxDEV(SocketContext.Provider, {\n    value: contextValue,\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 65,\n    columnNumber: 9\n  }, this);\n};\n\n// Custom hook to easily use the socket anywhere in the app\n_s(SocketProvider, \"uL0jX7IfpSWUZIEqRvE8FXMMp3A=\", false, function () {\n  return [useAuth];\n});\n_c = SocketProvider;\nexport const useSocket = () => {\n  _s2();\n  return useContext(SocketContext);\n};\n_s2(useSocket, \"gDsCjeeItUuvgOWf1v4qoK9RF6k=\");\nvar _c;\n$RefreshReg$(_c, \"SocketProvider\");","map":{"version":3,"names":["React","createContext","useContext","useEffect","useState","io","useAuth","jsxDEV","_jsxDEV","SocketContext","SocketProvider","children","_s","user","isAuthenticated","token","socket","setSocket","isConnected","setIsConnected","newSocket","auth","on","console","log","id","err","error","message","disconnect","contextValue","Provider","value","fileName","_jsxFileName","lineNumber","columnNumber","_c","useSocket","_s2","$RefreshReg$"],"sources":["C:/Users/itach/Documents/book-exchange-mern/frontend/src/contexts/SocketContext.js"],"sourcesContent":["// frontend/src/contexts/SocketContext.js\r\nimport React, { createContext, useContext, useEffect, useState } from 'react';\r\nimport io from 'socket.io-client';\r\nimport { useAuth } from './AuthContext'; // To get the user token for authenticated sockets\r\n\r\nconst SocketContext = createContext();\r\n\r\nexport const SocketProvider = ({ children }) => {\r\n    const { user, isAuthenticated, token } = useAuth(); // Get auth state from AuthContext\r\n    const [socket, setSocket] = useState(null);\r\n    const [isConnected, setIsConnected] = useState(false);\r\n\r\n    useEffect(() => {\r\n        // Only connect if the user is authenticated and a token exists\r\n        if (isAuthenticated && token) {\r\n            // Connect to your backend Socket.IO server\r\n            // Ensure this URL matches your backend server's URL\r\n            const newSocket = io('http://localhost:5000', {\r\n                // Add authentication headers if your backend requires it\r\n                // We'll implement this more robustly later if needed on the socket side\r\n                auth: {\r\n                    token: token,\r\n                },\r\n            });\r\n\r\n            newSocket.on('connect', () => {\r\n                console.log('Socket Connected:', newSocket.id);\r\n                setIsConnected(true);\r\n                // Emit an event to join a user-specific room on connect (optional, for later)\r\n                // newSocket.emit('joinUserRoom', user._id);\r\n            });\r\n\r\n            newSocket.on('disconnect', () => {\r\n                console.log('Socket Disconnected:', newSocket.id);\r\n                setIsConnected(false);\r\n            });\r\n\r\n            newSocket.on('connect_error', (err) => {\r\n                console.error('Socket Connection Error:', err.message);\r\n                setIsConnected(false);\r\n            });\r\n\r\n            setSocket(newSocket);\r\n\r\n            // Clean up the socket connection when the component unmounts or user logs out\r\n            return () => {\r\n                newSocket.disconnect();\r\n                setSocket(null);\r\n                setIsConnected(false);\r\n            };\r\n        } else if (!isAuthenticated && socket) {\r\n            // If user logs out and socket is still connected, disconnect it\r\n            socket.disconnect();\r\n            setSocket(null);\r\n            setIsConnected(false);\r\n        }\r\n    }, [isAuthenticated, token, user]); // Re-run effect if auth state changes\r\n\r\n    const contextValue = {\r\n        socket,\r\n        isConnected,\r\n    };\r\n\r\n    return (\r\n        <SocketContext.Provider value={contextValue}>\r\n            {children}\r\n        </SocketContext.Provider>\r\n    );\r\n};\r\n\r\n// Custom hook to easily use the socket anywhere in the app\r\nexport const useSocket = () => {\r\n    return useContext(SocketContext);\r\n};"],"mappings":";;;AAAA;AACA,OAAOA,KAAK,IAAIC,aAAa,EAAEC,UAAU,EAAEC,SAAS,EAAEC,QAAQ,QAAQ,OAAO;AAC7E,OAAOC,EAAE,MAAM,kBAAkB;AACjC,SAASC,OAAO,QAAQ,eAAe,CAAC,CAAC;AAAA,SAAAC,MAAA,IAAAC,OAAA;AAEzC,MAAMC,aAAa,gBAAGR,aAAa,CAAC,CAAC;AAErC,OAAO,MAAMS,cAAc,GAAGA,CAAC;EAAEC;AAAS,CAAC,KAAK;EAAAC,EAAA;EAC5C,MAAM;IAAEC,IAAI;IAAEC,eAAe;IAAEC;EAAM,CAAC,GAAGT,OAAO,CAAC,CAAC,CAAC,CAAC;EACpD,MAAM,CAACU,MAAM,EAAEC,SAAS,CAAC,GAAGb,QAAQ,CAAC,IAAI,CAAC;EAC1C,MAAM,CAACc,WAAW,EAAEC,cAAc,CAAC,GAAGf,QAAQ,CAAC,KAAK,CAAC;EAErDD,SAAS,CAAC,MAAM;IACZ;IACA,IAAIW,eAAe,IAAIC,KAAK,EAAE;MAC1B;MACA;MACA,MAAMK,SAAS,GAAGf,EAAE,CAAC,uBAAuB,EAAE;QAC1C;QACA;QACAgB,IAAI,EAAE;UACFN,KAAK,EAAEA;QACX;MACJ,CAAC,CAAC;MAEFK,SAAS,CAACE,EAAE,CAAC,SAAS,EAAE,MAAM;QAC1BC,OAAO,CAACC,GAAG,CAAC,mBAAmB,EAAEJ,SAAS,CAACK,EAAE,CAAC;QAC9CN,cAAc,CAAC,IAAI,CAAC;QACpB;QACA;MACJ,CAAC,CAAC;MAEFC,SAAS,CAACE,EAAE,CAAC,YAAY,EAAE,MAAM;QAC7BC,OAAO,CAACC,GAAG,CAAC,sBAAsB,EAAEJ,SAAS,CAACK,EAAE,CAAC;QACjDN,cAAc,CAAC,KAAK,CAAC;MACzB,CAAC,CAAC;MAEFC,SAAS,CAACE,EAAE,CAAC,eAAe,EAAGI,GAAG,IAAK;QACnCH,OAAO,CAACI,KAAK,CAAC,0BAA0B,EAAED,GAAG,CAACE,OAAO,CAAC;QACtDT,cAAc,CAAC,KAAK,CAAC;MACzB,CAAC,CAAC;MAEFF,SAAS,CAACG,SAAS,CAAC;;MAEpB;MACA,OAAO,MAAM;QACTA,SAAS,CAACS,UAAU,CAAC,CAAC;QACtBZ,SAAS,CAAC,IAAI,CAAC;QACfE,cAAc,CAAC,KAAK,CAAC;MACzB,CAAC;IACL,CAAC,MAAM,IAAI,CAACL,eAAe,IAAIE,MAAM,EAAE;MACnC;MACAA,MAAM,CAACa,UAAU,CAAC,CAAC;MACnBZ,SAAS,CAAC,IAAI,CAAC;MACfE,cAAc,CAAC,KAAK,CAAC;IACzB;EACJ,CAAC,EAAE,CAACL,eAAe,EAAEC,KAAK,EAAEF,IAAI,CAAC,CAAC,CAAC,CAAC;;EAEpC,MAAMiB,YAAY,GAAG;IACjBd,MAAM;IACNE;EACJ,CAAC;EAED,oBACIV,OAAA,CAACC,aAAa,CAACsB,QAAQ;IAACC,KAAK,EAAEF,YAAa;IAAAnB,QAAA,EACvCA;EAAQ;IAAAsB,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACW,CAAC;AAEjC,CAAC;;AAED;AAAAxB,EAAA,CA/DaF,cAAc;EAAA,QACkBJ,OAAO;AAAA;AAAA+B,EAAA,GADvC3B,cAAc;AAgE3B,OAAO,MAAM4B,SAAS,GAAGA,CAAA,KAAM;EAAAC,GAAA;EAC3B,OAAOrC,UAAU,CAACO,aAAa,CAAC;AACpC,CAAC;AAAC8B,GAAA,CAFWD,SAAS;AAAA,IAAAD,EAAA;AAAAG,YAAA,CAAAH,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}