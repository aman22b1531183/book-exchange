{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\itach\\\\Documents\\\\book-exchange-mern\\\\frontend\\\\src\\\\contexts\\\\AuthContext.js\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\n// client/src/contexts/AuthContext.js\nimport React, { createContext, useState, useEffect, useContext } from 'react';\nimport axios from 'axios';\nimport { toast } from 'react-toastify'; // For notifications\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst AuthContext = /*#__PURE__*/createContext();\nexport const AuthProvider = ({\n  children\n}) => {\n  _s();\n  const [user, setUser] = useState(null);\n  const [loading, setLoading] = useState(true); // To manage initial loading state\n\n  useEffect(() => {\n    const loadUser = async () => {\n      const userInfo = localStorage.getItem('userInfo');\n      if (userInfo) {\n        try {\n          const parsedUserInfo = JSON.parse(userInfo);\n          // Optional: Validate token with backend if you have a /api/auth/verifyToken endpoint\n          // For now, we trust the stored info if it exists\n          setUser(parsedUserInfo);\n        } catch (error) {\n          console.error(\"Failed to parse user info from localStorage:\", error);\n          localStorage.removeItem('userInfo'); // Clear invalid data\n        }\n      }\n      setLoading(false);\n    };\n    loadUser();\n  }, []);\n  const login = async (email, password) => {\n    try {\n      const {\n        data\n      } = await axios.post('/api/auth/login', {\n        email,\n        password\n      });\n      localStorage.setItem('userInfo', JSON.stringify(data));\n      setUser(data);\n      toast.success('Login successful!');\n      return true; // Indicate success\n    } catch (error) {\n      const errorMessage = error.response && error.response.data.message ? error.response.data.message : error.message;\n      toast.error(errorMessage);\n      return false; // Indicate failure\n    }\n  };\n  const register = async (username, email, password) => {\n    try {\n      const {\n        data\n      } = await axios.post('/api/auth/register', {\n        username,\n        email,\n        password\n      });\n      localStorage.setItem('userInfo', JSON.stringify(data));\n      setUser(data);\n      toast.success('Registration successful! Logged in automatically.');\n      return true;\n    } catch (error) {\n      const errorMessage = error.response && error.response.data.message ? error.response.data.message : error.message;\n      toast.error(errorMessage);\n      return false;\n    }\n  };\n  const logout = () => {\n    localStorage.removeItem('userInfo');\n    setUser(null);\n    toast.info('Logged out.');\n  };\n\n  // Value provided to consumers of this context\n  const authContextValue = {\n    user,\n    loading,\n    login,\n    register,\n    logout,\n    // You can add more derived states like isAuthenticated: !!user\n    isAuthenticated: !!user && !loading,\n    token: user ? user.token : null\n  };\n  return /*#__PURE__*/_jsxDEV(AuthContext.Provider, {\n    value: authContextValue,\n    children: [!loading && children, \" \"]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 82,\n    columnNumber: 9\n  }, this);\n};\n\n// Custom hook for easier access to auth context\n_s(AuthProvider, \"NiO5z6JIqzX62LS5UWDgIqbZYyY=\");\n_c = AuthProvider;\nexport const useAuth = () => {\n  _s2();\n  return useContext(AuthContext);\n};\n_s2(useAuth, \"gDsCjeeItUuvgOWf1v4qoK9RF6k=\");\nvar _c;\n$RefreshReg$(_c, \"AuthProvider\");","map":{"version":3,"names":["React","createContext","useState","useEffect","useContext","axios","toast","jsxDEV","_jsxDEV","AuthContext","AuthProvider","children","_s","user","setUser","loading","setLoading","loadUser","userInfo","localStorage","getItem","parsedUserInfo","JSON","parse","error","console","removeItem","login","email","password","data","post","setItem","stringify","success","errorMessage","response","message","register","username","logout","info","authContextValue","isAuthenticated","token","Provider","value","fileName","_jsxFileName","lineNumber","columnNumber","_c","useAuth","_s2","$RefreshReg$"],"sources":["C:/Users/itach/Documents/book-exchange-mern/frontend/src/contexts/AuthContext.js"],"sourcesContent":["// client/src/contexts/AuthContext.js\r\nimport React, { createContext, useState, useEffect, useContext } from 'react';\r\nimport axios from 'axios';\r\nimport { toast } from 'react-toastify'; // For notifications\r\n\r\nconst AuthContext = createContext();\r\n\r\nexport const AuthProvider = ({ children }) => {\r\n    const [user, setUser] = useState(null);\r\n    const [loading, setLoading] = useState(true); // To manage initial loading state\r\n\r\n    useEffect(() => {\r\n        const loadUser = async () => {\r\n            const userInfo = localStorage.getItem('userInfo');\r\n            if (userInfo) {\r\n                try {\r\n                    const parsedUserInfo = JSON.parse(userInfo);\r\n                    // Optional: Validate token with backend if you have a /api/auth/verifyToken endpoint\r\n                    // For now, we trust the stored info if it exists\r\n                    setUser(parsedUserInfo);\r\n                } catch (error) {\r\n                    console.error(\"Failed to parse user info from localStorage:\", error);\r\n                    localStorage.removeItem('userInfo'); // Clear invalid data\r\n                }\r\n            }\r\n            setLoading(false);\r\n        };\r\n        loadUser();\r\n    }, []);\r\n\r\n    const login = async (email, password) => {\r\n        try {\r\n            const { data } = await axios.post('/api/auth/login', { email, password });\r\n            localStorage.setItem('userInfo', JSON.stringify(data));\r\n            setUser(data);\r\n            toast.success('Login successful!');\r\n            return true; // Indicate success\r\n        } catch (error) {\r\n            const errorMessage = error.response && error.response.data.message\r\n                ? error.response.data.message\r\n                : error.message;\r\n            toast.error(errorMessage);\r\n            return false; // Indicate failure\r\n        }\r\n    };\r\n\r\n    const register = async (username, email, password) => {\r\n        try {\r\n            const { data } = await axios.post('/api/auth/register', { username, email, password });\r\n            localStorage.setItem('userInfo', JSON.stringify(data));\r\n            setUser(data);\r\n            toast.success('Registration successful! Logged in automatically.');\r\n            return true;\r\n        } catch (error) {\r\n            const errorMessage = error.response && error.response.data.message\r\n                ? error.response.data.message\r\n                : error.message;\r\n            toast.error(errorMessage);\r\n            return false;\r\n        }\r\n    };\r\n\r\n    const logout = () => {\r\n        localStorage.removeItem('userInfo');\r\n        setUser(null);\r\n        toast.info('Logged out.');\r\n    };\r\n\r\n    // Value provided to consumers of this context\r\n    const authContextValue = {\r\n        user,\r\n        loading,\r\n        login,\r\n        register,\r\n        logout,\r\n        // You can add more derived states like isAuthenticated: !!user\r\n        isAuthenticated: !!user && !loading,\r\n        token: user ? user.token : null\r\n    };\r\n\r\n    return (\r\n        <AuthContext.Provider value={authContextValue}>\r\n            {!loading && children} {/* Render children only after user loading is complete */}\r\n        </AuthContext.Provider>\r\n    );\r\n};\r\n\r\n// Custom hook for easier access to auth context\r\nexport const useAuth = () => {\r\n    return useContext(AuthContext);\r\n};"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}