{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\itach\\\\Documents\\\\book-exchange-mern\\\\frontend\\\\src\\\\pages\\\\NotificationsPage.js\",\n  _s = $RefreshSig$();\n// frontend/src/pages/NotificationsPage.js\nimport React, { useEffect, useState, useCallback } from 'react';\nimport axios from 'axios';\nimport { toast } from 'react-toastify';\nimport { useAuth } from '../contexts/AuthContext';\nimport { Link } from 'react-router-dom';\nimport '../App.css'; // For page-heading, status-message\nimport './Notifications.css'; // We'll create this for styling the page\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction NotificationsPage() {\n  _s();\n  const {\n    token,\n    user\n  } = useAuth();\n  const [notifications, setNotifications] = useState([]);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState(null);\n  const fetchNotifications = useCallback(async () => {\n    if (!token) {\n      setLoading(false);\n      setError('Authentication token not found. Please log in.');\n      return;\n    }\n    try {\n      setLoading(true);\n      const config = {\n        headers: {\n          Authorization: `Bearer ${token}`\n        }\n      };\n      const {\n        data\n      } = await axios.get('/api/notifications', config);\n      setNotifications(data);\n      setLoading(false);\n    } catch (err) {\n      console.error('Error fetching notifications:', err);\n      const errorMessage = err.response && err.response.data.message ? err.response.data.message : err.message;\n      setError(`Failed to load notifications: ${errorMessage}`);\n      toast.error(`Failed to load notifications: ${errorMessage}`);\n      setLoading(false);\n    }\n  }, [token]);\n  useEffect(() => {\n    fetchNotifications();\n  }, [fetchNotifications]);\n  const handleMarkAsRead = async notificationId => {\n    try {\n      const config = {\n        headers: {\n          Authorization: `Bearer ${token}`\n        }\n      };\n      await axios.put(`/api/notifications/${notificationId}/read`, {}, config);\n      toast.success('Notification marked as read!');\n      // Update the state to reflect the change without re-fetching all\n      setNotifications(prevNotifications => prevNotifications.map(n => n._id === notificationId ? {\n        ...n,\n        isRead: true,\n        readAt: new Date()\n      } : n));\n      // Optionally, also update unread count in header immediately\n      // This would require a context for unread count\n    } catch (error) {\n      console.error('Error marking notification as read:', error);\n      const errorMessage = error.response && error.response.data.message ? error.response.data.message : error.message;\n      toast.error(`Failed to mark as read: ${errorMessage}`);\n    }\n  };\n  const handleMarkAllAsRead = async () => {\n    try {\n      const config = {\n        headers: {\n          Authorization: `Bearer ${token}`\n        }\n      };\n      await axios.put('/api/notifications/mark-all-read', {}, config);\n      toast.success('All notifications marked as read!');\n      // Update all unread notifications in state to read\n      setNotifications(prevNotifications => prevNotifications.map(n => n.isRead ? n : {\n        ...n,\n        isRead: true,\n        readAt: new Date()\n      }));\n      // Optionally, also update unread count in header immediately\n    } catch (error) {\n      console.error('Error marking all notifications as read:', error);\n      const errorMessage = error.response && error.response.data.message ? error.response.data.message : error.message;\n      toast.error(`Failed to mark all as read: ${errorMessage}`);\n    }\n  };\n  const getLinkForNotification = notification => {\n    switch (notification.type) {\n      case 'exchange_request':\n      case 'status_update':\n      case 'message':\n        return `/exchanges/${notification.referenceId}`;\n      // Add cases for other notification types if they link to other pages\n      default:\n        return '#';\n      // No specific link or stay on notifications page\n    }\n  };\n  if (loading) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"status-message\",\n      children: \"Loading notifications...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 107,\n      columnNumber: 16\n    }, this);\n  }\n  if (error) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"status-message error-message\",\n      children: [\"Error: \", error]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 111,\n      columnNumber: 16\n    }, this);\n  }\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"notifications-page-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      className: \"page-heading\",\n      children: \"My Notifications\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 116,\n      columnNumber: 13\n    }, this), notifications.length > 0 && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"notifications-actions\",\n      children: /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: handleMarkAllAsRead,\n        className: \"mark-all-read-btn\",\n        children: \"Mark All as Read\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 120,\n        columnNumber: 21\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 119,\n      columnNumber: 17\n    }, this), notifications.length === 0 ? /*#__PURE__*/_jsxDEV(\"p\", {\n      className: \"status-message no-notifications\",\n      children: \"You have no notifications yet.\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 127,\n      columnNumber: 17\n    }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"notifications-list\",\n      children: notifications.map(notification => /*#__PURE__*/_jsxDEV(\"div\", {\n        className: `notification-item ${notification.isRead ? 'read' : 'unread'}`,\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"notification-content\",\n          children: [notification.sender && notification.sender.profilePictureUrl && /*#__PURE__*/_jsxDEV(\"img\", {\n            src: notification.sender.profilePictureUrl,\n            alt: notification.sender.username,\n            className: \"notification-sender-avatar\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 134,\n            columnNumber: 37\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            className: \"notification-message\",\n            children: [notification.message, /*#__PURE__*/_jsxDEV(\"span\", {\n              className: \"notification-date\",\n              children: new Date(notification.createdAt).toLocaleString()\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 138,\n              columnNumber: 37\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 136,\n            columnNumber: 33\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 132,\n          columnNumber: 29\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"notification-actions\",\n          children: [!notification.isRead && /*#__PURE__*/_jsxDEV(\"button\", {\n            onClick: () => handleMarkAsRead(notification._id),\n            className: \"mark-read-btn\",\n            children: \"Mark as Read\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 145,\n            columnNumber: 37\n          }, this), getLinkForNotification(notification) !== '#' && /*#__PURE__*/_jsxDEV(Link, {\n            to: getLinkForNotification(notification),\n            className: \"view-details-link\",\n            children: \"View Details\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 150,\n            columnNumber: 37\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 143,\n          columnNumber: 29\n        }, this)]\n      }, notification._id, true, {\n        fileName: _jsxFileName,\n        lineNumber: 131,\n        columnNumber: 25\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 129,\n      columnNumber: 17\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 115,\n    columnNumber: 9\n  }, this);\n}\n_s(NotificationsPage, \"IWEIAdx3UHtVg62xp2xLmY42PFA=\", false, function () {\n  return [useAuth];\n});\n_c = NotificationsPage;\nexport default NotificationsPage;\nvar _c;\n$RefreshReg$(_c, \"NotificationsPage\");","map":{"version":3,"names":["React","useEffect","useState","useCallback","axios","toast","useAuth","Link","jsxDEV","_jsxDEV","NotificationsPage","_s","token","user","notifications","setNotifications","loading","setLoading","error","setError","fetchNotifications","config","headers","Authorization","data","get","err","console","errorMessage","response","message","handleMarkAsRead","notificationId","put","success","prevNotifications","map","n","_id","isRead","readAt","Date","handleMarkAllAsRead","getLinkForNotification","notification","type","referenceId","className","children","fileName","_jsxFileName","lineNumber","columnNumber","length","onClick","sender","profilePictureUrl","src","alt","username","createdAt","toLocaleString","to","_c","$RefreshReg$"],"sources":["C:/Users/itach/Documents/book-exchange-mern/frontend/src/pages/NotificationsPage.js"],"sourcesContent":["// frontend/src/pages/NotificationsPage.js\r\nimport React, { useEffect, useState, useCallback } from 'react';\r\nimport axios from 'axios';\r\nimport { toast } from 'react-toastify';\r\nimport { useAuth } from '../contexts/AuthContext';\r\nimport { Link } from 'react-router-dom';\r\nimport '../App.css'; // For page-heading, status-message\r\nimport './Notifications.css'; // We'll create this for styling the page\r\n\r\nfunction NotificationsPage() {\r\n    const { token, user } = useAuth();\r\n    const [notifications, setNotifications] = useState([]);\r\n    const [loading, setLoading] = useState(true);\r\n    const [error, setError] = useState(null);\r\n\r\n    const fetchNotifications = useCallback(async () => {\r\n        if (!token) {\r\n            setLoading(false);\r\n            setError('Authentication token not found. Please log in.');\r\n            return;\r\n        }\r\n        try {\r\n            setLoading(true);\r\n            const config = {\r\n                headers: {\r\n                    Authorization: `Bearer ${token}`,\r\n                },\r\n            };\r\n            const { data } = await axios.get('/api/notifications', config);\r\n            setNotifications(data);\r\n            setLoading(false);\r\n        } catch (err) {\r\n            console.error('Error fetching notifications:', err);\r\n            const errorMessage = err.response && err.response.data.message\r\n                ? err.response.data.message\r\n                : err.message;\r\n            setError(`Failed to load notifications: ${errorMessage}`);\r\n            toast.error(`Failed to load notifications: ${errorMessage}`);\r\n            setLoading(false);\r\n        }\r\n    }, [token]);\r\n\r\n    useEffect(() => {\r\n        fetchNotifications();\r\n    }, [fetchNotifications]);\r\n\r\n    const handleMarkAsRead = async (notificationId) => {\r\n        try {\r\n            const config = {\r\n                headers: {\r\n                    Authorization: `Bearer ${token}`,\r\n                },\r\n            };\r\n            await axios.put(`/api/notifications/${notificationId}/read`, {}, config);\r\n            toast.success('Notification marked as read!');\r\n            // Update the state to reflect the change without re-fetching all\r\n            setNotifications(prevNotifications =>\r\n                prevNotifications.map(n => n._id === notificationId ? { ...n, isRead: true, readAt: new Date() } : n)\r\n            );\r\n            // Optionally, also update unread count in header immediately\r\n            // This would require a context for unread count\r\n        } catch (error) {\r\n            console.error('Error marking notification as read:', error);\r\n            const errorMessage = error.response && error.response.data.message\r\n                ? error.response.data.message\r\n                : error.message;\r\n            toast.error(`Failed to mark as read: ${errorMessage}`);\r\n        }\r\n    };\r\n\r\n    const handleMarkAllAsRead = async () => {\r\n        try {\r\n            const config = {\r\n                headers: {\r\n                    Authorization: `Bearer ${token}`,\r\n                },\r\n            };\r\n            await axios.put('/api/notifications/mark-all-read', {}, config);\r\n            toast.success('All notifications marked as read!');\r\n            // Update all unread notifications in state to read\r\n            setNotifications(prevNotifications =>\r\n                prevNotifications.map(n => n.isRead ? n : { ...n, isRead: true, readAt: new Date() })\r\n            );\r\n            // Optionally, also update unread count in header immediately\r\n        } catch (error) {\r\n            console.error('Error marking all notifications as read:', error);\r\n            const errorMessage = error.response && error.response.data.message\r\n                ? error.response.data.message\r\n                : error.message;\r\n            toast.error(`Failed to mark all as read: ${errorMessage}`);\r\n        }\r\n    };\r\n\r\n    const getLinkForNotification = (notification) => {\r\n        switch (notification.type) {\r\n            case 'exchange_request':\r\n            case 'status_update':\r\n            case 'message':\r\n                return `/exchanges/${notification.referenceId}`;\r\n            // Add cases for other notification types if they link to other pages\r\n            default:\r\n                return '#'; // No specific link or stay on notifications page\r\n        }\r\n    };\r\n\r\n    if (loading) {\r\n        return <div className=\"status-message\">Loading notifications...</div>;\r\n    }\r\n\r\n    if (error) {\r\n        return <div className=\"status-message error-message\">Error: {error}</div>;\r\n    }\r\n\r\n    return (\r\n        <div className=\"notifications-page-container\">\r\n            <h1 className=\"page-heading\">My Notifications</h1>\r\n\r\n            {notifications.length > 0 && (\r\n                <div className=\"notifications-actions\">\r\n                    <button onClick={handleMarkAllAsRead} className=\"mark-all-read-btn\">\r\n                        Mark All as Read\r\n                    </button>\r\n                </div>\r\n            )}\r\n\r\n            {notifications.length === 0 ? (\r\n                <p className=\"status-message no-notifications\">You have no notifications yet.</p>\r\n            ) : (\r\n                <div className=\"notifications-list\">\r\n                    {notifications.map(notification => (\r\n                        <div key={notification._id} className={`notification-item ${notification.isRead ? 'read' : 'unread'}`}>\r\n                            <div className=\"notification-content\">\r\n                                {notification.sender && notification.sender.profilePictureUrl && (\r\n                                    <img src={notification.sender.profilePictureUrl} alt={notification.sender.username} className=\"notification-sender-avatar\" />\r\n                                )}\r\n                                <p className=\"notification-message\">\r\n                                    {notification.message}\r\n                                    <span className=\"notification-date\">\r\n                                        {new Date(notification.createdAt).toLocaleString()}\r\n                                    </span>\r\n                                </p>\r\n                            </div>\r\n                            <div className=\"notification-actions\">\r\n                                {!notification.isRead && (\r\n                                    <button onClick={() => handleMarkAsRead(notification._id)} className=\"mark-read-btn\">\r\n                                        Mark as Read\r\n                                    </button>\r\n                                )}\r\n                                {getLinkForNotification(notification) !== '#' && (\r\n                                    <Link to={getLinkForNotification(notification)} className=\"view-details-link\">\r\n                                        View Details\r\n                                    </Link>\r\n                                )}\r\n                            </div>\r\n                        </div>\r\n                    ))}\r\n                </div>\r\n            )}\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default NotificationsPage;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}