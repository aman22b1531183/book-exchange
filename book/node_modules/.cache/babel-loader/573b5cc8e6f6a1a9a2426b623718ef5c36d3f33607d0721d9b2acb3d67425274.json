{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\itach\\\\Documents\\\\book-exchange-mern\\\\frontend\\\\src\\\\contexts\\\\AuthContext.js\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\n// frontend/src/contexts/AuthContext.js\nimport React, { createContext, useState, useEffect, useContext, useRef } from 'react'; // Import useRef\nimport axios from 'axios';\nimport { toast } from 'react-toastify';\nimport io from 'socket.io-client'; // NEW: Import socket.io-client\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst AuthContext = /*#__PURE__*/createContext();\nexport const AuthProvider = ({\n  children\n}) => {\n  _s();\n  console.log('--- AuthProvider: RENDER ---');\n  const [user, setUser] = useState(() => {\n    console.log('AuthProvider: user state init');\n    return null;\n  });\n  const [loading, setLoading] = useState(() => {\n    console.log('AuthProvider: loading state init');\n    return true;\n  });\n  const socket = useRef(null); // NEW: Use useRef to hold the socket instance\n\n  // Connect to Socket.IO when user is authenticated\n  useEffect(() => {\n    if (user && user.token && !socket.current) {\n      console.log(\"AuthProvider: Connecting Socket.IO...\");\n      // Connect to your backend's Socket.IO server\n      socket.current = io('http://localhost:5000', {\n        // Pass token for potential authentication on connect, if you choose to implement that\n        auth: {\n          token: user.token\n        },\n        withCredentials: true // Important for CORS/cookies if needed\n      });\n      socket.current.on('connect', () => {\n        console.log('Socket.IO Connected:', socket.current.id);\n        // Join a room specific to the user's ID\n        socket.current.emit('join_notifications', user._id);\n      });\n      socket.current.on('disconnect', () => {\n        console.log('Socket.IO Disconnected');\n      });\n\n      // Handle incoming custom events\n      socket.current.on('new_exchange_request', data => {\n        toast.info(`ðŸ”” ${data.message}`);\n        console.log(\"Received new_exchange_request:\", data);\n        // You might also trigger a re-fetch of exchange requests here\n      });\n      socket.current.on('exchange_status_update', data => {\n        toast.info(`ðŸ“¢ ${data.message}`);\n        console.log(\"Received exchange_status_update:\", data);\n        // You might trigger a re-fetch of exchange requests here\n      });\n      socket.current.on('new_message', data => {\n        // Only show toast if not already on the chat page for that exchange\n        // Or if you want a notification for every new message\n        toast.info(`ðŸ’¬ ${data.message}`);\n        console.log(\"Received new_message:\", data);\n        // If you're on the chat page, this will be handled by polling or a separate socket listener\n      });\n    } else if (!user && socket.current) {\n      // Disconnect socket if user logs out\n      console.log(\"AuthProvider: Disconnecting Socket.IO due to user logout.\");\n      socket.current.disconnect();\n      socket.current = null;\n    }\n\n    // Cleanup function: disconnect socket when component unmounts or user changes\n    return () => {\n      if (socket.current) {\n        console.log(\"AuthProvider: Cleaning up Socket.IO connection.\");\n        socket.current.disconnect();\n        socket.current = null;\n      }\n    };\n  }, [user]); // Re-run effect when user object changes (login/logout)\n\n  // Initial load user from localStorage (existing code)\n  useEffect(() => {\n    console.log('AuthProvider: useEffect triggered (initial load user)');\n    const loadUser = () => {\n      try {\n        const userInfo = localStorage.getItem('userInfo');\n        if (userInfo) {\n          console.log('AuthProvider: Found userInfo in localStorage');\n          const parsedUserInfo = JSON.parse(userInfo);\n          setUser(parsedUserInfo);\n        } else {\n          console.log('AuthProvider: No userInfo in localStorage');\n        }\n      } catch (error) {\n        console.error(\"AuthProvider: Failed to parse user info from localStorage:\", error);\n        localStorage.removeItem('userInfo');\n        setUser(null);\n      } finally {\n        setLoading(false);\n        console.log('AuthProvider: setLoading(false)');\n      }\n    };\n    loadUser();\n  }, []); // Empty dependency array ensures this runs only ONCE on mount\n\n  // ... (login, register, logout, updateUserInContext functions remain the same) ...\n\n  const authContextValue = {\n    user,\n    loading,\n    login,\n    register,\n    logout,\n    isAuthenticated: !!user && !loading,\n    token: user ? user.token : null,\n    updateUserInContext,\n    socket: socket.current // NEW: Expose the socket instance\n  };\n  return /*#__PURE__*/_jsxDEV(AuthContext.Provider, {\n    value: authContextValue,\n    children: !loading && children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 122,\n    columnNumber: 9\n  }, this);\n};\n_s(AuthProvider, \"ZGDeMmgGbwyrWPlMR5Vr6CL4a/Q=\");\n_c = AuthProvider;\nexport const useAuth = () => {\n  _s2();\n  return useContext(AuthContext);\n};\n_s2(useAuth, \"gDsCjeeItUuvgOWf1v4qoK9RF6k=\");\nvar _c;\n$RefreshReg$(_c, \"AuthProvider\");","map":{"version":3,"names":["React","createContext","useState","useEffect","useContext","useRef","axios","toast","io","jsxDEV","_jsxDEV","AuthContext","AuthProvider","children","_s","console","log","user","setUser","loading","setLoading","socket","token","current","auth","withCredentials","on","id","emit","_id","data","info","message","disconnect","loadUser","userInfo","localStorage","getItem","parsedUserInfo","JSON","parse","error","removeItem","authContextValue","login","register","logout","isAuthenticated","updateUserInContext","Provider","value","fileName","_jsxFileName","lineNumber","columnNumber","_c","useAuth","_s2","$RefreshReg$"],"sources":["C:/Users/itach/Documents/book-exchange-mern/frontend/src/contexts/AuthContext.js"],"sourcesContent":["// frontend/src/contexts/AuthContext.js\r\nimport React, { createContext, useState, useEffect, useContext, useRef } from 'react'; // Import useRef\r\nimport axios from 'axios';\r\nimport { toast } from 'react-toastify';\r\nimport io from 'socket.io-client'; // NEW: Import socket.io-client\r\n\r\nconst AuthContext = createContext();\r\n\r\nexport const AuthProvider = ({ children }) => {\r\n    console.log('--- AuthProvider: RENDER ---');\r\n    const [user, setUser] = useState(() => {\r\n        console.log('AuthProvider: user state init');\r\n        return null;\r\n    });\r\n    const [loading, setLoading] = useState(() => {\r\n        console.log('AuthProvider: loading state init');\r\n        return true;\r\n    });\r\n\r\n    const socket = useRef(null); // NEW: Use useRef to hold the socket instance\r\n\r\n    // Connect to Socket.IO when user is authenticated\r\n    useEffect(() => {\r\n        if (user && user.token && !socket.current) {\r\n            console.log(\"AuthProvider: Connecting Socket.IO...\");\r\n            // Connect to your backend's Socket.IO server\r\n            socket.current = io('http://localhost:5000', {\r\n                // Pass token for potential authentication on connect, if you choose to implement that\r\n                auth: { token: user.token },\r\n                withCredentials: true // Important for CORS/cookies if needed\r\n            });\r\n\r\n            socket.current.on('connect', () => {\r\n                console.log('Socket.IO Connected:', socket.current.id);\r\n                // Join a room specific to the user's ID\r\n                socket.current.emit('join_notifications', user._id);\r\n            });\r\n\r\n            socket.current.on('disconnect', () => {\r\n                console.log('Socket.IO Disconnected');\r\n            });\r\n\r\n            // Handle incoming custom events\r\n            socket.current.on('new_exchange_request', (data) => {\r\n                toast.info(`ðŸ”” ${data.message}`);\r\n                console.log(\"Received new_exchange_request:\", data);\r\n                // You might also trigger a re-fetch of exchange requests here\r\n            });\r\n\r\n            socket.current.on('exchange_status_update', (data) => {\r\n                toast.info(`ðŸ“¢ ${data.message}`);\r\n                console.log(\"Received exchange_status_update:\", data);\r\n                // You might trigger a re-fetch of exchange requests here\r\n            });\r\n\r\n            socket.current.on('new_message', (data) => {\r\n                // Only show toast if not already on the chat page for that exchange\r\n                // Or if you want a notification for every new message\r\n                toast.info(`ðŸ’¬ ${data.message}`);\r\n                console.log(\"Received new_message:\", data);\r\n                // If you're on the chat page, this will be handled by polling or a separate socket listener\r\n            });\r\n\r\n        } else if (!user && socket.current) {\r\n            // Disconnect socket if user logs out\r\n            console.log(\"AuthProvider: Disconnecting Socket.IO due to user logout.\");\r\n            socket.current.disconnect();\r\n            socket.current = null;\r\n        }\r\n\r\n        // Cleanup function: disconnect socket when component unmounts or user changes\r\n        return () => {\r\n            if (socket.current) {\r\n                console.log(\"AuthProvider: Cleaning up Socket.IO connection.\");\r\n                socket.current.disconnect();\r\n                socket.current = null;\r\n            }\r\n        };\r\n    }, [user]); // Re-run effect when user object changes (login/logout)\r\n\r\n\r\n    // Initial load user from localStorage (existing code)\r\n    useEffect(() => {\r\n        console.log('AuthProvider: useEffect triggered (initial load user)');\r\n        const loadUser = () => {\r\n            try {\r\n                const userInfo = localStorage.getItem('userInfo');\r\n                if (userInfo) {\r\n                    console.log('AuthProvider: Found userInfo in localStorage');\r\n                    const parsedUserInfo = JSON.parse(userInfo);\r\n                    setUser(parsedUserInfo);\r\n                } else {\r\n                    console.log('AuthProvider: No userInfo in localStorage');\r\n                }\r\n            } catch (error) {\r\n                console.error(\"AuthProvider: Failed to parse user info from localStorage:\", error);\r\n                localStorage.removeItem('userInfo');\r\n                setUser(null);\r\n            } finally {\r\n                setLoading(false);\r\n                console.log('AuthProvider: setLoading(false)');\r\n            }\r\n        };\r\n        loadUser();\r\n    }, []); // Empty dependency array ensures this runs only ONCE on mount\r\n\r\n    // ... (login, register, logout, updateUserInContext functions remain the same) ...\r\n\r\n    const authContextValue = {\r\n        user,\r\n        loading,\r\n        login,\r\n        register,\r\n        logout,\r\n        isAuthenticated: !!user && !loading,\r\n        token: user ? user.token : null,\r\n        updateUserInContext,\r\n        socket: socket.current // NEW: Expose the socket instance\r\n    };\r\n\r\n    return (\r\n        <AuthContext.Provider value={authContextValue}>\r\n            {!loading && children}\r\n        </AuthContext.Provider>\r\n    );\r\n};\r\n\r\nexport const useAuth = () => {\r\n    return useContext(AuthContext);\r\n};"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}