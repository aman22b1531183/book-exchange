{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\itach\\\\Documents\\\\book-exchange-mern\\\\frontend\\\\src\\\\contexts\\\\SocketContext.js\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\n// frontend/src/contexts/SocketContext.js\nimport React, { createContext, useContext, useEffect, useState } from 'react';\nimport io from 'socket.io-client';\nimport { useAuth } from './AuthContext'; // To get the user token for authenticated sockets\nimport { toast } from 'react-toastify'; // <--- IMPORT TOAST\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst SocketContext = /*#__PURE__*/createContext();\nexport const SocketProvider = ({\n  children\n}) => {\n  _s();\n  const {\n    user,\n    isAuthenticated,\n    token\n  } = useAuth(); // Get auth state from AuthContext\n  const [socket, setSocket] = useState(null);\n  const [isConnected, setIsConnected] = useState(false);\n  useEffect(() => {\n    // Only connect if the user is authenticated and a token exists\n    if (isAuthenticated && token && user) {\n      // Ensure user object is also available\n      // Connect to your backend Socket.IO server\n      // Ensure this URL matches your backend server's URL\n      const newSocket = io('http://localhost:5000', {\n        auth: {\n          token: token // Pass the JWT token for potential authentication on socket connection\n        }\n      });\n      newSocket.on('connect', () => {\n        console.log('Socket Connected:', newSocket.id);\n        setIsConnected(true);\n        // Immediately join the user-specific room upon connection\n        // This room is named after the user's MongoDB _id\n        newSocket.emit('joinUserRoom', user._id);\n        console.log(`Socket ${newSocket.id} joined user room: ${user._id}`);\n      });\n      newSocket.on('disconnect', () => {\n        console.log('Socket Disconnected:', newSocket.id);\n        setIsConnected(false);\n      });\n      newSocket.on('connect_error', err => {\n        console.error('Socket Connection Error:', err.message);\n        setIsConnected(false);\n        toast.error(`Socket connection error: ${err.message}`); // Notify user of connection issues\n      });\n\n      // --- NEW: Listen for 'newNotification' event ---\n      newSocket.on('newNotification', notification => {\n        console.log('New real-time notification received:', notification);\n        // Display a toast notification\n        toast.info(notification.message, {\n          onClick: () => {\n            // Optionally, you can add navigation logic here when the toast is clicked.\n            // For example, navigate to the exchange details page for exchange-related notifications.\n            // You would need 'navigate' from react-router-dom, which isn't directly\n            // available in context. A common pattern is to dispatch an action or\n            // use window.location.href, or to handle navigation directly in the NotificationPage.\n            // For now, it just displays.\n            if (notification.type === 'exchange_request' || notification.type === 'status_update' || notification.type === 'message') {\n              // Example of direct navigation (consider using useNavigate hook from a component if possible)\n              // window.location.href = `/exchanges/${notification.referenceId}`;\n            }\n          },\n          // Optional: Keep toast open longer for important notifications\n          autoClose: notification.type === 'message' || notification.type === 'exchange_request' ? 8000 : 5000\n        });\n      });\n      setSocket(newSocket);\n\n      // Clean up the socket connection when the component unmounts or user logs out\n      return () => {\n        newSocket.off('connect');\n        newSocket.off('disconnect');\n        newSocket.off('connect_error');\n        newSocket.off('newNotification'); // Clean up notification listener\n        newSocket.disconnect();\n        setSocket(null);\n        setIsConnected(false);\n      };\n    } else if (!isAuthenticated && socket) {\n      // If user logs out and socket is still connected, disconnect it\n      socket.disconnect();\n      setSocket(null);\n      setIsConnected(false);\n    }\n  }, [isAuthenticated, token, user]); // Re-run effect if auth state changes\n\n  const contextValue = {\n    socket,\n    isConnected\n  };\n  return /*#__PURE__*/_jsxDEV(SocketContext.Provider, {\n    value: contextValue,\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 93,\n    columnNumber: 9\n  }, this);\n};\n\n// Custom hook to easily use the socket anywhere in the app\n_s(SocketProvider, \"uL0jX7IfpSWUZIEqRvE8FXMMp3A=\", false, function () {\n  return [useAuth];\n});\n_c = SocketProvider;\nexport const useSocket = () => {\n  _s2();\n  return useContext(SocketContext);\n};\n_s2(useSocket, \"gDsCjeeItUuvgOWf1v4qoK9RF6k=\");\nvar _c;\n$RefreshReg$(_c, \"SocketProvider\");","map":{"version":3,"names":["React","createContext","useContext","useEffect","useState","io","useAuth","toast","jsxDEV","_jsxDEV","SocketContext","SocketProvider","children","_s","user","isAuthenticated","token","socket","setSocket","isConnected","setIsConnected","newSocket","auth","on","console","log","id","emit","_id","err","error","message","notification","info","onClick","type","autoClose","off","disconnect","contextValue","Provider","value","fileName","_jsxFileName","lineNumber","columnNumber","_c","useSocket","_s2","$RefreshReg$"],"sources":["C:/Users/itach/Documents/book-exchange-mern/frontend/src/contexts/SocketContext.js"],"sourcesContent":["// frontend/src/contexts/SocketContext.js\r\nimport React, { createContext, useContext, useEffect, useState } from 'react';\r\nimport io from 'socket.io-client';\r\nimport { useAuth } from './AuthContext'; // To get the user token for authenticated sockets\r\nimport { toast } from 'react-toastify'; // <--- IMPORT TOAST\r\n\r\nconst SocketContext = createContext();\r\n\r\nexport const SocketProvider = ({ children }) => {\r\n    const { user, isAuthenticated, token } = useAuth(); // Get auth state from AuthContext\r\n    const [socket, setSocket] = useState(null);\r\n    const [isConnected, setIsConnected] = useState(false);\r\n\r\n    useEffect(() => {\r\n        // Only connect if the user is authenticated and a token exists\r\n        if (isAuthenticated && token && user) { // Ensure user object is also available\r\n            // Connect to your backend Socket.IO server\r\n            // Ensure this URL matches your backend server's URL\r\n            const newSocket = io('http://localhost:5000', {\r\n                auth: {\r\n                    token: token, // Pass the JWT token for potential authentication on socket connection\r\n                },\r\n            });\r\n\r\n            newSocket.on('connect', () => {\r\n                console.log('Socket Connected:', newSocket.id);\r\n                setIsConnected(true);\r\n                // Immediately join the user-specific room upon connection\r\n                // This room is named after the user's MongoDB _id\r\n                newSocket.emit('joinUserRoom', user._id);\r\n                console.log(`Socket ${newSocket.id} joined user room: ${user._id}`);\r\n            });\r\n\r\n            newSocket.on('disconnect', () => {\r\n                console.log('Socket Disconnected:', newSocket.id);\r\n                setIsConnected(false);\r\n            });\r\n\r\n            newSocket.on('connect_error', (err) => {\r\n                console.error('Socket Connection Error:', err.message);\r\n                setIsConnected(false);\r\n                toast.error(`Socket connection error: ${err.message}`); // Notify user of connection issues\r\n            });\r\n\r\n            // --- NEW: Listen for 'newNotification' event ---\r\n            newSocket.on('newNotification', (notification) => {\r\n                console.log('New real-time notification received:', notification);\r\n                // Display a toast notification\r\n                toast.info(notification.message, {\r\n                    onClick: () => {\r\n                        // Optionally, you can add navigation logic here when the toast is clicked.\r\n                        // For example, navigate to the exchange details page for exchange-related notifications.\r\n                        // You would need 'navigate' from react-router-dom, which isn't directly\r\n                        // available in context. A common pattern is to dispatch an action or\r\n                        // use window.location.href, or to handle navigation directly in the NotificationPage.\r\n                        // For now, it just displays.\r\n                        if (notification.type === 'exchange_request' || notification.type === 'status_update' || notification.type === 'message') {\r\n                            // Example of direct navigation (consider using useNavigate hook from a component if possible)\r\n                            // window.location.href = `/exchanges/${notification.referenceId}`;\r\n                        }\r\n                    },\r\n                    // Optional: Keep toast open longer for important notifications\r\n                    autoClose: notification.type === 'message' || notification.type === 'exchange_request' ? 8000 : 5000,\r\n                });\r\n            });\r\n\r\n            setSocket(newSocket);\r\n\r\n            // Clean up the socket connection when the component unmounts or user logs out\r\n            return () => {\r\n                newSocket.off('connect');\r\n                newSocket.off('disconnect');\r\n                newSocket.off('connect_error');\r\n                newSocket.off('newNotification'); // Clean up notification listener\r\n                newSocket.disconnect();\r\n                setSocket(null);\r\n                setIsConnected(false);\r\n            };\r\n        } else if (!isAuthenticated && socket) {\r\n            // If user logs out and socket is still connected, disconnect it\r\n            socket.disconnect();\r\n            setSocket(null);\r\n            setIsConnected(false);\r\n        }\r\n    }, [isAuthenticated, token, user]); // Re-run effect if auth state changes\r\n\r\n    const contextValue = {\r\n        socket,\r\n        isConnected,\r\n    };\r\n\r\n    return (\r\n        <SocketContext.Provider value={contextValue}>\r\n            {children}\r\n        </SocketContext.Provider>\r\n    );\r\n};\r\n\r\n// Custom hook to easily use the socket anywhere in the app\r\nexport const useSocket = () => {\r\n    return useContext(SocketContext);\r\n};"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}